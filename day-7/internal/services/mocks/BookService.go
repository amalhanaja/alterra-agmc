// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "alterra-agmc-day-7/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, book
func (_m *BookService) Create(ctx context.Context, book *models.Book) (*models.Book, error) {
	ret := _m.Called(ctx, book)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(context.Context, *models.Book) *models.Book); ok {
		r0 = rf(ctx, book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, id, userId
func (_m *BookService) DeleteByID(ctx context.Context, id uint, userId uint) error {
	ret := _m.Called(ctx, id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *BookService) FindAll(ctx context.Context) ([]*models.Book, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Book
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *BookService) FindByID(ctx context.Context, id uint) (*models.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, book
func (_m *BookService) Update(ctx context.Context, book *models.Book) (*models.Book, error) {
	ret := _m.Called(ctx, book)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(context.Context, *models.Book) *models.Book); ok {
		r0 = rf(ctx, book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookService(t mockConstructorTestingTNewBookService) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
